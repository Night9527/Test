package main;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPReply;
public class FileDownloadUtil {
	private static FTPClient ftpclient=new FTPClient();
	/**获取文件编码方式*/
	private static String encoding=System.getProperty("file.encoding");
	public static String url="127.0.0.1";
	public static int port=21;
	public static String username="myuser";
	public static String pwd="myuser";
	public static String hostpath="/";
	public static String hostfilename="frist1.txt";
	public static String uppath="E:\\up";
	public static String upfilename="myfiles1.txt";
	public static String downpath="E:\\down";
	public FileDownloadUtil(){
		
	}
	public FileDownloadUtil(String url,int port,String username,String password,String hostpath,String hostfilename){
		this.url=url;
		this.port=port;
		this.username=username;
		this.pwd=password;
		this.hostpath=hostpath;
		this.hostfilename=hostfilename;
	}
	public FileDownloadUtil(String url,int port,String username,String password){
		this.url=url;
		this.port=port;
		this.username=username;
		this.pwd=password;
	}
	public void path(String hostpath,String uppath,String downpath){
		this.hostpath=hostpath;
		this.uppath=uppath;
		this.downpath=downpath;
	}
	/**建立FTP连接*/
	public void connection(){
		try {
			ftpclient.connect(url);
			ftpclient.connect(url, port);//与服务器建立连接
			try {
				
				ftpclient.login(username, pwd);//登录服务器
				ftpclient.setControlEncoding(encoding);//设置编码方式
				//登陆后设置文件类型为二进制否则可能导致乱码文件无法打开 
				ftpclient.setFileType(FTP.BINARY_FILE_TYPE);
				//验证是否登录成功
				if(!FTPReply.isPositiveCompletion(ftpclient.getReplyCode())){
					System.out.println("登录失败");
					ftpclient.disconnect();
				}
			} catch (IOException e) {
				System.out.println("登录用户名或密码错误");
				e.printStackTrace();
			}
			
		} catch (IOException e) {
			System.out.println("服务器连接不存在");
			e.printStackTrace();
		}
	}
	/**退出并关闭FTP连接*/
	public void overConnection(){
		try {
			ftpclient.logout();
			ftpclient.disconnect();
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		
	}
    /**@path FTP上传文件到FTP */
	public boolean uploadFile(){
		boolean ret=false;
				try {
					// 转移到FTP服务器目录至指定的目录下
					if(ftpclient.changeWorkingDirectory(hostpath)){
						FileInputStream fis=new FileInputStream(new File(uppath+File.separator+upfilename));
						ret=ftpclient.storeFile(new String(hostfilename.getBytes(encoding),"iso-8859-1"), fis);
						if(ret){
							System.out.println("文件上传成功");
						}else{
							System.out.println("文件上传失败");
						}
						fis.close();
					}
					
				}catch (IOException e) {
					System.out.println("找不到指定的文件目录："+uppath+File.separator+upfilename);
					e.printStackTrace();
				}
				return ret;
				
	}
	public boolean download(){
		boolean ret=false;
		try {
			// 转移到FTP服务器目录至指定的目录下
            //ftpclient.changeWorkingDirectory(new String(hostpath.getBytes(encoding),"iso-8859-1"));
            FTPFile[] fs=ftpclient.listFiles();
            for(FTPFile file:fs){
            	if(file.getName().equals(hostfilename)){
            		FileOutputStream fos=new 
            				FileOutputStream(new File(downpath+"/"+file.getName()));
            		ret=ftpclient.retrieveFile(file.getName(), fos);
            		if(ret){
            			System.out.println("文件下载成功");
            		}
            		fos.close();
            		
            		
            	}
            }
            ftpclient.logout();
            
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			if(ftpclient.isConnected()){
				try {
					ftpclient.disconnect();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return false;
		
	}
	/**lis 要传入的实体结果集  path:文件路径 filename 文件名*/
	public static void changeWorkingPath(){
		try {
			ftpclient.changeWorkingDirectory(hostpath);
		} catch (IOException e) {
			System.out.println("找不到指定的文件目录："+uppath+File.separator+upfilename);
			e.printStackTrace();
		}
	}
	public static void getFileWriter(List<User> lis) throws IOException{
		FileOutputStream fos=
				new FileOutputStream(
						new File(uppath+File.separator+upfilename),true);
		fos.write(new String ("--User\r\n").getBytes());
		for(User user:lis){
			String str=user.toString()+"\r\n";
			byte[] b= str.getBytes();
			fos.write(b);
		}
		fos.close();
	}
	public static boolean getFileReader() throws Exception{
		FileInputStream fis=
				new FileInputStream(
						new File(downpath+File.separator+hostfilename));
		BufferedReader br=new BufferedReader(new InputStreamReader(fis));
		int b;
		while((b=br.read())!=-1){
			String str=br.readLine();
			for(int i=1;str.indexOf("|", i)>0;++i){
				System.out.println(str.indexOf(":", i)+" "+str.indexOf("|", i));
				System.out.println(str.substring(str.indexOf(":", i), str.indexOf("|", i)));
				i=str.indexOf("|", i);	
			}
			
		}
		return true;
	}
	public static void main(String[] args) throws Exception {
		
	}
	
	public static List<User> testList(){
		List<User> lis=new ArrayList<>();
		for(int i=0;i<10;i++){
			User user=new User();
			user.setId(System.currentTimeMillis()+"");
			user.setName("name"+i);
			user.setUser("user"+i);
			user.setPassword("mima"+i);
			user.setNote(System.currentTimeMillis());
			lis.add(user);
		}
		return lis;
	}
	
}
